// const { PrismaClient } = require('@prisma/client');

// const { supabase } = require("../utils/supabase");

// const prisma = new PrismaClient();

// const uploadData = async (req, res) => {
//   try {
//     const { type, userId } = req.params;
//     const file = req.file;

//     console.log("üìÇ Fichier re√ßu:", file);

//     if (!file) {
//       return res.status(400).json({ error: "Aucun fichier fourni" });
//     }
//     // V√©rification si `file.buffer` existe
//     if (!file.buffer) {
//       return res.status(500).json({ error: "Le fichier n'a pas √©t√© correctement trait√©" });
//     }

// // V√©rification du type de fichier
// const validTypes = ["company_logo", "profile_image", "CV"];
// if (!validTypes.includes(type)) {
//   return res.status(400).json({ message: `Type de fichier invalide: ${type}. Types autoris√©s: ${validTypes.join(', ')}.` });
// }

// // V√©rification que `userId` est bien fourni
// if (!userId) {
//   return res.status(400).json({ error: "L'ID utilisateur est requis" });
// }

// // D√©finition du chemin de stockage
// const filePath = `${type}/${userId}-${Date.now()}-${file.originalname}`;
// console.log("Chemin de stockage Supabase:", filePath);

// console.log("Envoi du fichier a Supabase...")

//     // Envoi √† Supabase Storage
//     const { data, error: uploadError } = await supabase.storage.from("jobboard_media")
//     .upload(filePath, file.buffer,
//      {
//      contentType: file.mimetype, // Ajoute le type MIME pour √©viter des erreurs
//      cacheControl: "3600",
//      upsert: false,//Emp√™che d‚Äô√©craser un fichier existant
//     });
    
//     if (uploadError) {
//       console.error("Erreur Supabase:", uploadError.message)
//       return res.status(500).json({
//         message: "Erreur lors du t√©l√©chargement du fichier vers le stockage.",
//         error: uploadError.message });
//     }
//     console.log("Fichier envoy√© avec success", data);
      

//     // URL publique du fichier
//     const fileUrl = `${process.env.SUPABASE_URL}/storage/v1/object/public/jobboard_media/${filePath}`;

//     // Sauvegarde dans PostgreSQL selon le type
//     if (type === "profile_image") {
//       await prisma.user.update({ 
//         where: { id: userId }, 
//         data: { picture: fileUrl } 
//       });
      
//     } else if (type === "company_logo") {
//         if (userRole !== "RECRUITER" || !companyIdFromToken) {
//           // Cela ne devrait pas arriver si les middlewares sont corrects, mais c'est une s√©curit√©
//           return res.status(403).json({ message: "Acc√®s non autoris√© : Seuls les recruteurs avec une entreprise associ√©e peuvent uploader un logo." });
//         }

//           // V√©rifier si l'entreprise existe et appartient √† ce recruteur (double v√©rification)
//         const company = await prisma.company.findUnique({
//             where: { id: companyIdFromToken, userId: userId } // userId ici est l'ID du recruteur propri√©taire
//          });

//         if (!company) {
//           return res.status(404).json({ message: "Entreprise non trouv√©e ou non associ√©e √† votre compte." });
//         }


//       await prisma.company.update({ 
//         where: { id: company.id }, 
//         data: { logo: fileUrl } });
//     } else if (type === "CV") {
//       await prisma.application.updateMany({
//         where: { userId },
//         data: { cv_url: fileUrl }
//       });
//     }

//     return res.status(200).json({ 
//       message: "Fichier t√©l√©charg√© avec succ√®s", 
//       url: fileUrl 
//     });
//   }catch (error) {
//         console.error("‚ùå Erreur lors de l'upload du m√©dia :", error);
//         // G√©rer les erreurs sp√©cifiques de Prisma si n√©cessaire (ex: ID non trouv√© pour update)
//         if (error.code === 'P2025') { // Record not found (si userId ou companyId n'existe pas)
//             return res.status(404).json({ message: "Ressource cible non trouv√©e pour la mise √† jour." });
//         }
//         return res.status(500).json({
//             message: "Erreur interne du serveur lors de l'upload du m√©dia.",
//             error: error.message // Fournir le message d'erreur pour le d√©bogage en dev
//         });
//     }
// };

// module.exports = { uploadData };

/**
 * @file controllers/UploadController.js
 * @description Contr√¥leur pour la gestion du t√©l√©chargement de fichiers
 * vers Supabase Storage et la mise √† jour des URLs dans la base de donn√©es.
 */

const { PrismaClient } = require('@prisma/client');
const { supabase } = require("../utils/supabase"); // Assurez-vous que ce chemin est correct et que 'supabase' est bien export√©.

const prisma = new PrismaClient();

/**
 * @function uploadData
 * @description G√®re le t√©l√©chargement d'un fichier (image de profil, logo d'entreprise, CV)
 * vers Supabase Storage et met √† jour l'URL correspondante dans la base de donn√©es.
 *
 * @param {object} req - L'objet requ√™te Express.
 * Contient `req.params.type` (type de fichier), `req.user.id` (ID de l'utilisateur authentifi√©),
 * et `req.file` (le fichier t√©l√©charg√© par Multer).
 * @param {object} res - L'objet r√©ponse Express.
 * @returns {Promise<void>} Une promesse qui r√©sout sans valeur ou rejette avec une erreur.
 */
const uploadData = async (req, res) => {
    try {
        const { type } = req.params; // Type de fichier (ex: 'profile_image', 'company_logo', 'CV')
        // CORRECTION CRITIQUE: L'ID de l'utilisateur DOIT venir du token authentifi√©, pas des params de l'URL.
        const userId = req.user.id; // ID de l'utilisateur authentifi√© via verifyToken
        const userRole = req.user.role; // R√¥le de l'utilisateur authentifi√©
        const companyIdFromToken = req.user.companyId; // ID de l'entreprise si l'utilisateur est un recruteur

        const file = req.file; // Fichier trait√© par Multer

        console.log("üìÇ Fichier re√ßu pour upload. Type:", type, "Utilisateur ID:", userId);

        // --- Validation initiale du fichier ---
        if (!file) {
            return res.status(400).json({ message: "Aucun fichier fourni." });
        }
        if (!file.buffer) {
            return res.status(500).json({ message: "Le fichier n'a pas √©t√© correctement trait√© (buffer manquant)." });
        }

        // --- Validation du type de fichier ---
        const validTypes = ["company_logo", "profile_image", "CV"];
        if (!validTypes.includes(type)) {
            return res.status(400).json({ message: `Type de fichier invalide: ${type}. Types autoris√©s: ${validTypes.join(', ')}.` });
        }

        // --- D√©finition du chemin de stockage dans Supabase ---
        // Utilise l'ID de l'utilisateur authentifi√© pour le chemin, pas celui des params.
        const filePath = `${type}/${userId}-${Date.now()}-${file.originalname}`;
        console.log("Chemin de stockage Supabase:", filePath);

        // --- Envoi du fichier √† Supabase Storage ---
        console.log("Envoi du fichier √† Supabase Storage...");
        const { data, error: uploadError } = await supabase.storage
        .from("jobboard_media")
        .upload(
            filePath,
            file.buffer,
            {
                contentType: file.mimetype, // Type MIME du fichier
                cacheControl: "3600", // Cache pour 1 heure
                upsert: true, // √©craser un fichier existant avec le m√™me chemin
            }
        );
        let fileUrl =""
        if (uploadError) {
            console.error("‚ùå Erreur Supabase lors de l'upload :", uploadError.message);
            return res.status(500).json({
                message: "Erreur lors du t√©l√©chargement du fichier vers le stockage.",
                error: uploadError.message
            });
        } else{
          // recup√©rer l'url publique
          const {data:publicUrlData} = supabase.storage.from('jobboard_media')
          .getPublicUrl(filePath);
          fileUrl = publicUrlData.publicUrl
        }
        console.log("Fichier envoy√© √† Supabase avec succ√®s. Donn√©es:", data);

        // --- G√©n√©ration de l'URL publique du fichier ---
        // const fileUrl  = `${process.env.SUPABASE_URL}/storage/v1/object/public/jobboard_media/${filePath}`;
        console.log("URL publique du fichier:", fileUrl);

        // --- Sauvegarde de l'URL dans la base de donn√©es PostgreSQL (via Prisma) ---
        if (type === "profile_image") {
            // Mise √† jour de l'image de profil de l'utilisateur
            await prisma.user.update({
                where: { id: userId },
                data: { picture: fileUrl }
            });
        } else if (type === "company_logo") {
            // Mise √† jour du logo de l'entreprise
            // V√©rification que l'utilisateur est un recruteur et qu'il a une companyId
            if (userRole !== "RECRUITER" || !companyIdFromToken) {
                return res.status(403).json({ message: "Acc√®s non autoris√© : Seuls les recruteurs avec une entreprise associ√©e peuvent uploader un logo." });
            }

            // si l'entreprise existe et appartient √† ce recruteur (double v√©rification)
            const company = await prisma.company.findUnique({
                where: { id: companyIdFromToken, userId: userId } // userId ici est l'ID du recruteur propri√©taire
            });

            if (!company) {
                return res.status(404).json({ message: "Entreprise non trouv√©e ou non associ√©e √† votre compte." });
            }

            await prisma.company.update({
                where: { id: company.id },
                data: { logo: fileUrl }
            });
        } 

        // --- R√©ponse de succ√®s ---
        return res.status(200).json({
            message: "Fichier t√©l√©charg√© et enregistr√© avec succ√®s.",
            fileUrl: fileUrl 
        });
    } catch (error) {
        console.error("‚ùå Erreur lors de l'upload du m√©dia :", error);
        // G√©rer les erreurs sp√©cifiques de Prisma si n√©cessaire (ex: ID non trouv√© pour update)
        if (error.code === 'P2025') { // Record not found (si userId ou companyId n'existe pas)
            return res.status(404).json({ message: "Ressource cible non trouv√©e pour la mise √† jour." });
        }
        return res.status(500).json({
            message: "Erreur interne du serveur lors de l'upload du m√©dia.",
            error: error.message // Fournir le message d'erreur pour le d√©bogage en dev
        });
    }
};

module.exports = { uploadData };
