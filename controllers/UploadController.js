const { PrismaClient } = require('@prisma/client');
const { supabase } = require("../utils/supabase");

const prisma = new PrismaClient();

const uploadData = async (req, res) => {
  try {
    const { type, userId } = req.params;
    const file = req.file;

    console.log("üìÇ Fichier re√ßu:", file);

    if (!file) {
      return res.status(400).json({ error: "Aucun fichier fourni" });
    }
    // V√©rification si `file.buffer` existe
    if (!file.buffer) {
      return res.status(500).json({ error: "Le fichier n'a pas √©t√© correctement trait√©" });
    }

// V√©rification du type de fichier
const validTypes = ["company_logo", "profile_image", "CV"];
if (!validTypes.includes(type)) {
  return res.status(400).json({ message: `Type de fichier invalide: ${type}. Types autoris√©s: ${validTypes.join(', ')}.` });
}

// V√©rification que `userId` est bien fourni
if (!userId) {
  return res.status(400).json({ error: "L'ID utilisateur est requis" });
}

// D√©finition du chemin de stockage
const filePath = `${type}/${userId}-${Date.now()}-${file.originalname}`;
console.log("Chemin de stockage Supabase:", filePath);

console.log("Envoi du fichier a Supabase...")

    // Envoi √† Supabase Storage
    const { data, error: uploadError } = await supabase.storage.from("jobboard_media")
    .upload(filePath, file.buffer,
     {
     contentType: file.mimetype, // Ajoute le type MIME pour √©viter des erreurs
     cacheControl: "3600",
     upsert: false,//Emp√™che d‚Äô√©craser un fichier existant
    });
    
    if (uploadError) {
      console.error("Erreur Supabase:", uploadError.message)
      return res.status(500).json({
        message: "Erreur lors du t√©l√©chargement du fichier vers le stockage.",
        error: uploadError.message });
    }
    console.log("Fichier envoy√© avec success", data);
      

    // URL publique du fichier
    const fileUrl = `${process.env.SUPABASE_URL}/storage/v1/object/public/jobboard_media/${filePath}`;

    // Sauvegarde dans PostgreSQL selon le type
    if (type === "profile_image") {
      await prisma.user.update({ 
        where: { id: userId }, 
        data: { picture: fileUrl } 
      });
      
    } else if (type === "company_logo") {
        if (userRole !== "RECRUITER" || !companyIdFromToken) {
          // Cela ne devrait pas arriver si les middlewares sont corrects, mais c'est une s√©curit√©
          return res.status(403).json({ message: "Acc√®s non autoris√© : Seuls les recruteurs avec une entreprise associ√©e peuvent uploader un logo." });
        }

          // V√©rifier si l'entreprise existe et appartient √† ce recruteur (double v√©rification)
        const company = await prisma.company.findUnique({
            where: { id: companyIdFromToken, userId: userId } // userId ici est l'ID du recruteur propri√©taire
         });

        if (!company) {
          return res.status(404).json({ message: "Entreprise non trouv√©e ou non associ√©e √† votre compte." });
        }


      await prisma.company.update({ 
        where: { id: company.id }, 
        data: { logo: fileUrl } });
    } else if (type === "CV") {
      await prisma.application.updateMany({
        where: { userId },
        data: { cv_url: fileUrl }
      });
    }

    return res.status(200).json({ 
      message: "Fichier t√©l√©charg√© avec succ√®s", 
      url: fileUrl 
    });
  }catch (error) {
        console.error("‚ùå Erreur lors de l'upload du m√©dia :", error);
        // G√©rer les erreurs sp√©cifiques de Prisma si n√©cessaire (ex: ID non trouv√© pour update)
        if (error.code === 'P2025') { // Record not found (si userId ou companyId n'existe pas)
            return res.status(404).json({ message: "Ressource cible non trouv√©e pour la mise √† jour." });
        }
        return res.status(500).json({
            message: "Erreur interne du serveur lors de l'upload du m√©dia.",
            error: error.message // Fournir le message d'erreur pour le d√©bogage en dev
        });
    }
};

module.exports = { uploadData };